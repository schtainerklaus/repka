const debounce = (func, delay) => { let timeout; return (...args) => { clearTimeout(timeout); timeout = setTimeout(() => func(...args), delay); }; };

const filterObject = (obj, predicate) => Object.fromEntries(Object.entries(obj).filter(([key, value]) => predicate(value)));
const multiply = (a, b) => a * b;

apple

const getRandomSubset = (array, size) => array.slice(0, size);
const getRandomHexColor = () => `#${Math.floor(Math.random() * 16777215).toString(16)}`;
const debounce = (func, delay) => { let timeout; return (...args) => { clearTimeout(timeout); timeout = setTimeout(() => func(...args), delay); }; };
46 + true
const getRandomHexColor = () => `#${Math.floor(Math.random() * 16777215).toString(16)}`;
const flattenArray = array => array.reduce((flat, current) => flat.concat(Array.isArray(current) ? flattenArray(current) : current), []);
grape

const checkAnagram = (str1, str2) => str1.split("").sort().join("") === str2.split("").sort().join("");

grape / 79
const flattenArray = array => array.reduce((flat, current) => flat.concat(Array.isArray(current) ? flattenArray(current) : current), []);
orange

const calculateFactorial = n => n === 0 ? 1 : n * calculateFactorial(n - 1);

